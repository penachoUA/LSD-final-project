library IEEE;
use IEEE.std_logic_1164.all;

entity ConfController is
	port(
		clk        : in  std_logic;
		reset      : in  std_logic;
		shortPress : in  std_logic;
		longPress  : in  std_logic;
		score      : out std_logic_vector(5 downto 0)
	);
end;

architecture Structural of ConfController is
	signal s_click           : std_logic;
	signal s_short_click     : std_logic;
	signal s_long_click      : std_logic;
	signal s_rapid_increment : std_logic;
	signal s_target          : std_logic_vector(5 downto 0);
	
	signal s_1hz_blink  : std_logic;
	signal s_10hz_pulse : std_logic;
	
	signal s_hexTen    : std_logic_vector(6 downto 0);
	signal s_hexUni    : std_logic_vector(6 downto 0);
	
	signal s_reset_timer : std_logic;
	signal s_timeExp     : std_logic;
	signal s_newTime     : std_logic;
begin
	pulse10hz_gen: entity work.PulseGen(Behavioral)
		generic map(MAX => 500_000)
		port map(
			clk   => clk,
			pulse => s_10hz_pulse
		);
	
	debounce1 : entity work.Debouncer(Behavioral)
     generic map(
			kHzClkFreq		=> 50_000,
			mSecMinInWidth => 100,
			inPolarity		=> '0',
			outPolarity 	=> '1'
		)
		port map(
			refClk 	 => CLOCK_50,
			dirtyIn	 => KEY(1),
			pulsedOut => s_short_click
		);
		
	s_rapid_increment <= s_10hz_pulse when s_long_click = '1' else '0';
		
	target_setter: entity work.TargetScoreSetter(Structural)
		port map(
			clk    => CLOCK_50,
			reset  => SW(0),
			click  => s_short_click or s_rapid_increment,
			target => s_target
		);
		
	target_display: entity work.ScoreDisplay(Structural)
		port map(
			score  => '0' & s_target,
			hexTen => s_hexTen,
			hexUni => s_hexUni
		);
		
	HEX7 <= s_hexTen when (s_1hz_blink = '1' or s_long_click = '1') else (others => 'Z');
	HEX6 <= s_hexUni when (s_1hz_blink = '1' or s_long_click = '1') else (others => 'Z');
end;